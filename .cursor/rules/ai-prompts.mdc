---
description: 
globs: 
alwaysApply: true
---

# Your rule content

- # AI Prompts Guide

This document outlines the approach for integrating various AI capabilities into the Studynaut backend.

## Core Components

1. **`AiService` (`server/src/modules/ai/ai.service.ts`):**
   * Acts as the central orchestrator for all AI tasks
   * Initializes configured AI provider instances (primary, fallback, visual) based on `.env` settings
   * Provides specific methods for different tasks (e.g., `generateLessonStructure`, `generateQuiz`, `extractFlashcards`, `generateVisualAsset`)
   * Implements a fallback mechanism for text-based tasks
   * Delegates visual generation to the configured `VISUAL_AI_PROVIDER`

2. **Provider Interfaces (`server/src/types/ai.types.ts`):**
   * Defines the standard `IAiProvider` interface
   * Defines common request (`AiRequestOptions`) and response (`AiResponse`) structures, including `imageBuffer` for visual results
   * Defines task-specific types (`LessonBlock`, `AiQuiz`, `AiFlashcard`, `AiStructuredContent`)

3. **Provider Implementations (`server/src/modules/ai/providers/`):**
   * **`gemini.provider.ts`:** Implements `IAiProvider` using the `@google/generative-ai` SDK
     * Handles text generation using the configured primary model (e.g., `gemini-2.0-flash`)
     * Handles **image generation** using the experimental **`gemini-2.0-flash-exp`** model
     * Requires passing `generationConfig` with `responseModalities: ['IMAGE', 'TEXT']` to the `generateContent` method
     * Extracts image data from the `inlineData` field in the response parts
   * **`openai.provider.ts`:** Implements `IAiProvider` using the `openai` Node.js library
     * Configured as the fallback provider (`gpt-4o`)
     * Handles text generation
   * Future providers can be added by implementing the `IAiProvider` interface

4. **Prompts (`server/src/modules/ai/prompts/prompts.ts`):**
   * Contains prompt templates tailored for specific AI tasks
   * The `GENERATE_LESSON_STRUCTURE` prompt includes instructions for embedding `[VISUAL::...]` placeholders

5. **Configuration (`server/src/core/config/index.ts` & `server/.env`):**
   * Loads API keys and provider choices:
     ```
     PRIMARY_AI_PROVIDER=gemini-2.0-flash
     FALLBACK_AI_PROVIDER=gpt-4o
     VISUAL_AI_PROVIDER=serpapi
     ```
   * Note: The `GeminiProvider` internally uses `gemini-2.0-flash-exp` for image generation regardless of the `VISUAL_AI_PROVIDER` setting if it's set to a Gemini model

## Visual Generation Strategy

1. **Primary Strategy: SerpAPI Image Search**
   * Uses the AI-generated description to create a targeted search query
   * Retrieves relevant images from web search results
   * Implemented in `server/src/modules/ai/utils/image-search.ts`
   * Configuration: `SERPAPI_API_KEY` in `.env`

2. **Secondary Strategy (Future): AI Image Generation**
   * Can use Gemini Vision API as a fallback
   * Generate custom images based on descriptions
   * Currently experimental but available in the codebase

## Workflow Example: Text Processing Pipeline with Visuals

1. User submits text
2. `MediaService` saves source, enqueues `PROCESS_SOURCE_TEXT`
3. `Worker` calls `aiService.generateLessonStructure`
4. `AiService` uses `GeminiProvider` (`gemini-2.0-flash`) with the `GENERATE_LESSON_STRUCTURE` prompt
5. Gemini responds with JSON containing structured content and embedded `[VISUAL::...]` placeholders
6. `AiService` transforms the response to `LessonBlock[]`, preserving placeholders
7. Worker saves structure, enqueues `PROCESS_VISUAL_PLACEHOLDERS`
8. `PROCESS_VISUAL_PLACEHOLDERS` job finds the `[VISUAL::...]` tags, creates `Visual` records in DB (status: PENDING), and enqueues `GENERATE_VISUAL` jobs
9. `GENERATE_VISUAL` jobs run for each visual
10. For each visual, SerpAPI is used to find a relevant image based on the description
11. If successful, the image URL is saved to the visual record
12. Upon completion of all visual jobs, the `ASSEMBLE_NOTE` job is triggered
13. `ASSEMBLE_NOTE` replaces visual placeholders with actual images or fallback placeholders
14. The final note with integrated visuals is saved to the database

## Key Prompt Types

1. **Lesson Structure Generation**
   * Purpose: Convert raw text/transcript into structured learning content
   * Key elements: Title, sections with headings, visual opportunities
   * Output: JSON structure with `structure` array and `visualOpportunities`

2. **Quiz Generation**
   * Purpose: Create quizzes based on note content
   * Output: Multiple-choice questions with answers and explanations

3. **Flashcard Extraction**
   * Purpose: Create study flashcards from note content
   * Output: Term/definition pairs for key concepts

## Best Practices for AI Integration

1. Always implement fallback mechanisms for AI service failures
2. Use structured JSON parsing with validation for AI outputs
3. Implement retries with exponential backoff for transient errors
4. Keep prompts version-controlled alongside code
5. Regularly review and update prompts as AI models evolve 
---
description: 
globs: 
alwaysApply: true
---

# Your rule content

- # UI/UX Guidelines

This document defines the UI design system and guidelines for Studynaut, ensuring a consistent and user-friendly experience.

## 1. Design System

### 1.1. Colors

Studynaut uses a carefully selected color palette based on the OKLCH color format for better accessibility:

#### Primary Colors
- **Primary:** `#854BDD` (Purple) - Main brand color, used for primary actions, active states, and key UI elements.
- **Primary Foreground:** `#FFFFFF` - Text/icons on primary backgrounds.

#### Secondary Colors
- **Secondary:** `#6B6F7D` - Used for secondary buttons, less emphasized actions.
- **Secondary Foreground:** `#FFFFFF` - Text/icons on secondary backgrounds.

#### Semantic Colors
- **Accent:** `#F59E0B` (Amber) - Used for highlights, attention-drawing elements.
- **Destructive:** `#EF4444` (Red) - Used for delete actions, errors, warnings.
- **Success:** `#10B981` (Green) - Used for success states, confirmations.
- **Info:** `#3B82F6` (Blue) - Used for informational elements, help.

#### Background & Text
- **Background:** `#FFFFFF` (Light mode) - Main page background.
- **Foreground:** `#111827` - Primary text color.
- **Muted:** `#F7F8FA` - Subtle background for cards, sections.
- **Muted Foreground:** `#6B7280` - Secondary text, less emphasized.

#### Border & Shadow
- **Border:** `#E5E7EB` - Default border color.
- **Input:** `#D1D5DB` - Form input borders.
- **Ring:** `rgba(133, 75, 221, 0.5)` - Focus state ring (based on primary).

### 1.2. Typography

The typographic system is built for readability and visual hierarchy:

#### Font Family
- **Primary:** Inter, sans-serif - Used for all text.
- **Monospace:** Consolas, Monaco, monospace - Used for code blocks.

#### Font Sizes
- **Display:** `text-4xl` (2.25rem) - Used for main page headings.
- **H1:** `text-3xl` (1.875rem) - Primary section headings.
- **H2:** `text-2xl` (1.5rem) - Secondary section headings.
- **H3:** `text-xl` (1.25rem) - Tertiary section headings.
- **Body:** `text-base` (1rem) - Default text size.
- **Small:** `text-sm` (0.875rem) - Secondary text, captions.
- **XSmall:** `text-xs` (0.75rem) - Fine print, attribution.

#### Font Weights
- **Normal:** 400 - Default body text.
- **Medium:** 500 - Emphasis, subheadings.
- **Semibold:** 600 - Headings, important elements.
- **Bold:** 700 - Display text, strong emphasis.

#### Line Heights
- **Tight:** 1.2 - Headings.
- **Normal:** 1.5 - Body text.
- **Relaxed:** 1.75 - Large blocks of text.

### 1.3. Spacing

All spacing follows an 8pt grid system:

- **xs:** `4px` (`p-1`, `m-1`) - Minimal spacing, tight elements.
- **sm:** `8px` (`p-2`, `m-2`) - Compact spacing.
- **md:** `16px` (`p-4`, `m-4`) - Standard spacing.
- **lg:** `24px` (`p-6`, `m-6`) - Generous spacing.
- **xl:** `32px` (`p-8`, `m-8`) - Section spacing.
- **2xl:** `48px` (`p-12`, `m-12`) - Page section spacing.

### 1.4. Border Radius

Consistent corner rounding for UI elements:

- **None:** `rounded-none` - Square corners.
- **Small:** `rounded-sm` (2px) - Subtle rounding.
- **Medium:** `rounded-md` (6px) - Standard for most elements (buttons, inputs).
- **Large:** `rounded-lg` (8px) - Cards, modals, larger containers.
- **Full:** `rounded-full` - Circles, pills (tags, avatars).

### 1.5. Shadows

Elevation levels for depth and hierarchy:

- **sm:** `shadow-sm` - Subtle elevation (hover states, cards).
- **md:** `shadow` - Standard elevation (dropdowns, popovers).
- **lg:** `shadow-lg` - Pronounced elevation (modals, dialogs).
- **xl:** `shadow-xl` - Maximum elevation (important notifications).

## 2. Components

Studynaut uses shadcn/ui components with custom styling. Here are the key components and their variants:

### 2.1. Buttons

```jsx
import { Button } from "@/components/ui/button";

// Primary (default)
<Button>Submit</Button>

// Secondary
<Button variant="secondary">Cancel</Button>

// Destructive
<Button variant="destructive">Delete</Button>

// Outline
<Button variant="outline">View Details</Button>

// Ghost
<Button variant="ghost">Skip</Button>

// Link
<Button variant="link">Learn More</Button>

// Icon button
<Button variant="ghost" size="icon">
  <Icon className="h-4 w-4" />
</Button>

// Button sizes
<Button size="sm">Small</Button>
<Button size="default">Default</Button>
<Button size="lg">Large</Button>

// Disabled state
<Button disabled>Processing...</Button>
```

### 2.2. Form Elements

```jsx
// Input
<Input placeholder="Enter email" />

// Text area
<Textarea placeholder="Description" />

// Select
<Select>
  <SelectTrigger>
    <SelectValue placeholder="Select option" />
  </SelectTrigger>
  <SelectContent>
    <SelectItem value="option1">Option 1</SelectItem>
    <SelectItem value="option2">Option 2</SelectItem>
  </SelectContent>
</Select>

// Checkbox
<Checkbox id="terms" />
<Label htmlFor="terms">Accept terms</Label>

// Radio group
<RadioGroup defaultValue="option1">
  <div className="flex items-center space-x-2">
    <RadioGroupItem value="option1" id="option1" />
    <Label htmlFor="option1">Option 1</Label>
  </div>
</RadioGroup>

// Toggle/Switch
<Switch checked={isEnabled} onCheckedChange={setIsEnabled} />
```

### 2.3. Cards

```jsx
<Card>
  <CardHeader>
    <CardTitle>Card Title</CardTitle>
    <CardDescription>Optional description</CardDescription>
  </CardHeader>
  <CardContent>
    <p>Main content goes here.</p>
  </CardContent>
  <CardFooter>
    <Button>Action</Button>
  </CardFooter>
</Card>
```

### 2.4. Feedback & Status

```jsx
// Alert
<Alert variant="default|destructive">
  <AlertTitle>Title</AlertTitle>
  <AlertDescription>Description text</AlertDescription>
</Alert>

// Toast notifications
toast({
  title: "Operation Successful",
  description: "Your changes have been saved.",
  variant: "default|destructive",
})

// Progress
<Progress value={75} className="w-full" />

// Loading skeleton
<Skeleton className="h-12 w-full rounded-md" />
```

## 3. Layout Guidelines

### 3.1. Page Structure

Standard page layout includes:

```jsx
<div className="min-h-screen flex flex-col">
  {/* Global navigation */}
  <Header />
  
  {/* Main content */}
  <main className="flex-1 container mx-auto py-8 px-4 md:px-6">
    {/* Page-specific content */}
    <h1 className="text-3xl font-semibold mb-6">Page Title</h1>
    <div className="grid gap-6">
      {/* Content sections */}
    </div>
  </main>
  
  {/* Footer */}
  <Footer />
</div>
```

### 3.2. Responsive Breakpoints

Follow these Tailwind breakpoints:

- **xs:** `<640px` - Mobile
- **sm:** `≥640px` - Small tablets, large phones
- **md:** `≥768px` - Tablets, small laptops
- **lg:** `≥1024px` - Desktop screens
- **xl:** `≥1280px` - Large desktop screens
- **2xl:** `≥1536px` - Extra large screens

Example responsive patterns:

```jsx
<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
  {/* Grid items */}
</div>
```

### 3.3. Containers

- Use `container` class for centered, max-width content.
- Add horizontal padding: `px-4 md:px-6 lg:px-8`.
- Apply vertical spacing with `py-6 md:py-8 lg:py-12`.

## 4. Animation Guidelines

### 4.1. Principles

- **Purpose:** Only use animation with clear purpose (feedback, guidance, hierarchy).
- **Subtlety:** Keep animations subtle and unobtrusive.
- **Consistency:** Use similar timing and easing across the app.
- **Accessibility:** Respect user preferences (reduce motion).

### 4.2. Timing & Easing

- **Quick interactions:** 150-200ms (hovers, button states)
- **Standard transitions:** 200-300ms (card expansions, reveals)
- **Emphasis transitions:** 300-500ms (page transitions, important elements)
- **Easing:** Use `ease-in-out` or custom cubic-bezier curves

### 4.3. Implementation with Framer Motion

```jsx
import { motion } from "framer-motion";

// Simple fade-in animation
<motion.div
  initial={{ opacity: 0 }}
  animate={{ opacity: 1 }}
  transition={{ duration: 0.3 }}
>
  Content
</motion.div>

// Page transition wrapper
<motion.div
  key={routeKey}
  initial={{ opacity: 0, y: 20 }}
  animate={{ opacity: 1, y: 0 }}
  exit={{ opacity: 0, y: -20 }}
  transition={{ duration: 0.3 }}
>
  {children}
</motion.div>

// Staggered children (list items)
<motion.ul
  variants={{
    hidden: {},
    show: {
      transition: {
        staggerChildren: 0.1
      }
    }
  }}
  initial="hidden"
  animate="show"
>
  {items.map(item => (
    <motion.li
      key={item.id}
      variants={{
        hidden: { opacity: 0, y: 20 },
        show: { opacity: 1, y: 0 }
      }}
      transition={{ duration: 0.3 }}
    >
      {item.content}
    </motion.li>
  ))}
</motion.ul>
```

## 5. Accessibility Guidelines

### 5.1. Color & Contrast

- Ensure text meets WCAG AA standards (minimum 4.5:1 ratio for normal text).
- Don't rely on color alone to convey information.
- Test color combinations with contrast checkers.

### 5.2. Keyboard Navigation

- All interactive elements must be keyboard-focusable.
- Use logical tab order matching visual layout.
- Provide visible focus indicators (via `focus-visible`).
- Support keyboard shortcuts for power users.

### 5.3. Screen Readers

- Use semantic HTML elements (`<button>`, `<nav>`, etc.).
- Provide appropriate ARIA labels when needed.
- Ensure form fields have associated labels.
- Test with screen readers periodically.

### 5.4. Motion & Animation

- Respect `prefers-reduced-motion` media query:

```jsx
// In Tailwind and Framer Motion
<motion.div
  className="transition-opacity motion-reduce:transition-none"
  animate={{ opacity: 1 }}
  transition={{ 
    duration: 0.3, 
    // Check for reduced motion preference
    ...shouldReduceMotion && { duration: 0.01 } 
  }}
>
  Content
</motion.div>
```

## 6. Specific UI Patterns

### 6.1. Dashboard

- Grid layout with cards for different sections.
- Quick actions in a prominent position.
- Recent notes/activity in scrollable area.
- Status indicators for in-progress items.

### 6.2. Note Cards

- Consistent height in grid/list views.
- Visual indicator for source type (icon).
- Preview of content (truncated).
- Hover actions (favorite, delete, share).

### 6.3. Note Detail View

- Clear visual hierarchy with headings/sections.
- Sticky header with actions.
- Images integrated with relevant text.
- Appropriate spacing between sections.
- Link to original source/transcript.

### 6.4. Content Upload/Processing

- Clear multi-step indicator.
- Progress visualization.
- Estimations when available.
- Error states with recovery options.

### 6.5. Study Tools

- Flashcard interface with flip animation.
- Quiz interface with clear question/answer pattern.
- Progress tracking visuals.
- Results summary with score/feedback.

## 7. File Naming & Organization

### 7.1. Component Structure

```
components/
├── ui/                # Base shadcn/ui components
├── layout/            # Layout components (Header, Footer, etc.)
├── notes/             # Note-specific components
├── media/             # Media upload/processing components
├── study/             # Study tools components
└── auth/              # Authentication components
```

### 7.2. File Naming

- Use PascalCase for component files: `NoteCard.tsx`
- Use kebab-case for utility files: `date-format.ts`
- Group related components in folders: `notes/NoteCard.tsx`

## 8. Implementation Notes

### 8.1. Tailwind Utility Classes

Follow patterns for common styling needs:

```jsx
// Card pattern
<div className="rounded-lg bg-white shadow-md p-6 border border-border">

// Form field wrapper
<div className="space-y-2">
  <Label>Field Label</Label>
  <Input />
  <p className="text-sm text-muted-foreground">Helper text</p>
</div>

// Button groups
<div className="flex space-x-2">
  <Button>Primary</Button>
  <Button variant="outline">Secondary</Button>
</div>

// Responsive grid
<div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">

// Section spacing
<section className="py-12 space-y-8">
```

### 8.2. Dynamic Styling with cva

Use Class Variance Authority for complex component variants:

```jsx
// Example of button styles with cva
const buttonVariants = cva(
  "inline-flex items-center justify-center rounded-md font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline: "border border-input hover:bg-accent hover:text-accent-foreground",
        // etc.
      },
      size: {
        default: "h-10 py-2 px-4",
        sm: "h-9 px-3 rounded-md",
        lg: "h-11 px-8 rounded-md",
        // etc.
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
);
``` 
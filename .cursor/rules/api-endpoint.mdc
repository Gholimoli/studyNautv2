---
description: 
globs: 
alwaysApply: true
---

# Your rule content

-# API Endpoints Documentation

This document provides a comprehensive listing of all API endpoints in the Studynaut application.

## Authentication Endpoints

### POST /api/auth/register
- **Description:** Register a new user
- **Request Body:**
  ```json
  {
    "username": "string",
    "email": "string",
    "password": "string",
    "displayName": "string" (optional)
  }
  ```
- **Response:**
  ```json
  {
    "id": number,
    "username": "string",
    "email": "string",
    "displayName": "string",
    "role": "string"
  }
  ```
- **Status Codes:**
  - 201: User successfully created
  - 400: Invalid input
  - 409: Username or email already exists

### POST /api/auth/login
- **Description:** Authenticate a user
- **Request Body:**
  ```json
  {
    "username": "string",
    "password": "string"
  }
  ```
- **Response:**
  ```json
  {
    "id": number,
    "username": "string",
    "email": "string",
    "displayName": "string",
    "role": "string"
  }
  ```
- **Status Codes:**
  - 200: Login successful
  - 401: Authentication failed

### POST /api/auth/logout
- **Description:** End the user's session
- **Response:** No content
- **Status Codes:**
  - 204: Logout successful

### GET /api/auth/status
- **Description:** Get the authentication status and user info
- **Response:**
  ```json
  {
    "authenticated": boolean,
    "user": {
      "id": number,
      "username": "string",
      "email": "string",
      "displayName": "string",
      "role": "string"
    } | null
  }
  ```
- **Status Codes:**
  - 200: Successfully retrieved status

## Media/Source Endpoints

### POST /api/media/upload
- **Description:** Upload a media file (audio, PDF, image)
- **Request:** Multipart form data
  - `file`: The file to upload
  - `type`: The source type (AUDIO, PDF, IMAGE)
  - `languageCode`: Optional language code for audio (e.g., "en", "fr")
- **Response:**
  ```json
  {
    "sourceId": number,
    "message": "string"
  }
  ```
- **Status Codes:**
  - 201: Upload successful
  - 400: Invalid input or file
  - 401: Unauthorized

### POST /api/media/youtube
- **Description:** Process a YouTube video URL
- **Request Body:**
  ```json
  {
    "url": "string"
  }
  ```
- **Response:**
  ```json
  {
    "sourceId": number,
    "message": "string"
  }
  ```
- **Status Codes:**
  - 201: Successfully initiated processing
  - 400: Invalid URL or unable to fetch transcript
  - 401: Unauthorized

### POST /api/media/text
- **Description:** Process plain text input
- **Request Body:**
  ```json
  {
    "text": "string",
    "title": "string" (optional)
  }
  ```
- **Response:**
  ```json
  {
    "sourceId": number,
    "message": "string"
  }
  ```
- **Status Codes:**
  - 201: Successfully initiated processing
  - 400: Invalid input
  - 401: Unauthorized

### GET /api/media/sources
- **Description:** Get all sources for the authenticated user
- **Query Parameters:**
  - `type`: Optional filter by source type
  - `status`: Optional filter by processing status
  - `limit`: Number of results (default: 20)
  - `offset`: Pagination offset (default: 0)
- **Response:**
  ```json
  {
    "sources": [
      {
        "id": number,
        "userId": number,
        "sourceType": "YOUTUBE" | "TEXT" | "AUDIO" | "PDF" | "IMAGE",
        "originalUrl": "string",
        "originalFilename": "string",
        "processingStatus": "PENDING" | "PROCESSING" | "COMPLETED" | "FAILED",
        "processingStage": "string",
        "createdAt": "string",
        "updatedAt": "string"
      }
    ],
    "total": number
  }
  ```
- **Status Codes:**
  - 200: Successfully retrieved sources
  - 401: Unauthorized

### GET /api/media/sources/:id
- **Description:** Get details of a specific source
- **Path Parameters:**
  - `id`: Source ID
- **Response:**
  ```json
  {
    "id": number,
    "userId": number,
    "sourceType": "YOUTUBE" | "TEXT" | "AUDIO" | "PDF" | "IMAGE",
    "originalUrl": "string",
    "originalFilename": "string",
    "processingStatus": "PENDING" | "PROCESSING" | "COMPLETED" | "FAILED",
    "processingStage": "string",
    "processingError": "string",
    "metadata": object,
    "createdAt": "string",
    "updatedAt": "string"
  }
  ```
- **Status Codes:**
  - 200: Successfully retrieved source
  - 401: Unauthorized
  - 404: Source not found

### DELETE /api/media/sources/:id
- **Description:** Delete a source and its associated data
- **Path Parameters:**
  - `id`: Source ID
- **Response:** No content
- **Status Codes:**
  - 204: Successfully deleted
  - 401: Unauthorized
  - 404: Source not found

## Notes Endpoints

### GET /api/notes
- **Description:** Get all notes for the authenticated user
- **Query Parameters:**
  - `sourceType`: Optional filter by source type
  - `favorite`: Optional filter favorites (true/false)
  - `limit`: Number of results (default: 20)
  - `offset`: Pagination offset (default: 0)
- **Response:**
  ```json
  {
    "notes": [
      {
        "id": number,
        "sourceId": number,
        "userId": number,
        "title": "string",
        "createdAt": "string",
        "updatedAt": "string",
        "sourceType": "YOUTUBE" | "TEXT" | "AUDIO" | "PDF" | "IMAGE",
        "favorite": boolean
      }
    ],
    "total": number
  }
  ```
- **Status Codes:**
  - 200: Successfully retrieved notes
  - 401: Unauthorized

### GET /api/notes/:id
- **Description:** Get a specific note with full content
- **Path Parameters:**
  - `id`: Note ID
- **Response:**
  ```json
  {
    "id": number,
    "sourceId": number,
    "userId": number,
    "title": "string",
    "markdownContent": "string",
    "htmlContent": "string",
    "createdAt": "string",
    "updatedAt": "string",
    "sourceType": "YOUTUBE" | "TEXT" | "AUDIO" | "PDF" | "IMAGE",
    "favorite": boolean,
    "originalTranscript": "string" (if applicable)
  }
  ```
- **Status Codes:**
  - 200: Successfully retrieved note
  - 401: Unauthorized
  - 404: Note not found

### PATCH /api/notes/:id
- **Description:** Update a note
- **Path Parameters:**
  - `id`: Note ID
- **Request Body:**
  ```json
  {
    "title": "string", (optional)
    "markdownContent": "string", (optional)
    "htmlContent": "string", (optional)
    "favorite": boolean, (optional)
    "folderId": number | null (optional)
  }
  ```
- **Response:**
  ```json
  {
    "id": number,
    "title": "string",
    "updatedAt": "string"
  }
  ```
- **Status Codes:**
  - 200: Successfully updated
  - 401: Unauthorized
  - 404: Note not found

### DELETE /api/notes/:id
- **Description:** Delete a note
- **Path Parameters:**
  - `id`: Note ID
- **Response:** No content
- **Status Codes:**
  - 204: Successfully deleted
  - 401: Unauthorized
  - 404: Note not found

## Processing Status Endpoints

### GET /api/processing/status/:sourceId
- **Description:** Get the current processing status of a source
- **Path Parameters:**
  - `sourceId`: Source ID
- **Response:**
  ```json
  {
    "sourceId": number,
    "processingStatus": "PENDING" | "PROCESSING" | "COMPLETED" | "FAILED",
    "processingStage": "string",
    "processingError": "string",
    "progress": {
      "stage": "string",
      "completed": number,
      "total": number,
      "visualsCompleted": number,
      "visualsTotal": number
    }
  }
  ```
- **Status Codes:**
  - 200: Success
  - 401: Unauthorized
  - 404: Source not found

## Study Tools Endpoints

### GET /api/study/flashcards/:noteId
- **Description:** Get flashcards for a specific note
- **Path Parameters:**
  - `noteId`: Note ID
- **Response:**
  ```json
  {
    "flashcards": [
      {
        "id": number,
        "noteId": number,
        "term": "string",
        "definition": "string"
      }
    ]
  }
  ```
- **Status Codes:**
  - 200: Success
  - 401: Unauthorized
  - 404: Note not found

### GET /api/study/quiz/:noteId
- **Description:** Get quiz questions for a specific note
- **Path Parameters:**
  - `noteId`: Note ID
- **Response:**
  ```json
  {
    "questions": [
      {
        "id": number,
        "noteId": number,
        "question": "string",
        "options": ["string"],
        "correctAnswerIndex": number
      }
    ]
  }
  ```
- **Status Codes:**
  - 200: Success
  - 401: Unauthorized
  - 404: Note not found

## User Profile Endpoints

### GET /api/user/profile
- **Description:** Get the current user's profile
- **Response:**
  ```json
  {
    "id": number,
    "username": "string",
    "email": "string",
    "displayName": "string",
    "avatarUrl": "string",
    "role": "string",
    "createdAt": "string"
  }
  ```
- **Status Codes:**
  - 200: Success
  - 401: Unauthorized

### PATCH /api/user/profile
- **Description:** Update the current user's profile
- **Request Body:**
  ```json
  {
    "displayName": "string", (optional)
    "email": "string", (optional)
    "avatarUrl": "string" (optional)
  }
  ```
- **Response:**
  ```json
  {
    "id": number,
    "username": "string",
    "email": "string",
    "displayName": "string",
    "avatarUrl": "string",
    "updatedAt": "string"
  }
  ```
- **Status Codes:**
  - 200: Successfully updated
  - 400: Invalid input
  - 401: Unauthorized
  - 409: Email already in use

### POST /api/user/change-password
- **Description:** Change the current user's password
- **Request Body:**
  ```json
  {
    "currentPassword": "string",
    "newPassword": "string"
  }
  ```
- **Response:**
  ```json
  {
    "message": "Password updated successfully"
  }
  ```
- **Status Codes:**
  - 200: Successfully updated
  - 400: Invalid input
  - 401: Current password incorrect

## External API Integration

### ElevenLabs API
- **Endpoint:** https://api.elevenlabs.io/v1/speech-to-text
- **Model:** eleven_multilingual_v2
- **Authentication:** API key via header `xi-api-key`
- **Used in:** `transcribeAudio.job.ts`

### Google Gemini API
- **Endpoint:** Via SDK (@google/generative-ai)
- **Model:** gemini-1.5-flash-exp
- **Authentication:** API key via SDK configuration
- **Used in:** `ai.service.ts` and Gemini provider

### OpenAI API
- **Endpoint:** Via SDK (openai)
- **Model:** gpt-4o-mini
- **Authentication:** API key via SDK configuration
- **Used in:** `ai.service.ts` and OpenAI provider

### SerpAPI
- **Endpoint:** Via SDK (serpapi)
- **Engine:** google_images
- **Authentication:** API key via SDK configuration
- **Used in:** `image-search.ts` 